{"version":3,"sources":["node_modules/browser-pack/_prelude.js","dist/child-process/threadedclass-worker.js","dist/child-process/worker.js","dist/shared/lib.js","dist/shared/sharedApi.js","node_modules/base64-js/index.js","node_modules/buffer/index.js","node_modules/ieee754/index.js","node_modules/is-running/index.js","node_modules/process/browser.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","Object","defineProperty","value","lib_1","worker_1","WorkerThreads","getWorkerThreads","send","message","parentPort","postMessage","process","ThreadedWorker","Worker","[object Object]","handle","msg","cb","assign","messageType","cmdId","instanceId","id","queue","this","instanceHandles","isBrowser","worker","onmessage","m","type","onMessageFromParent","data","console","log","nodeSupportsWorkerThreads","workerThreads","isMainThread","isRunningInAWorkerThread","error","logError","on","isRunning","sharedApi_1","childHandler","callbacks","remoteFns","disabledMultithreading","_parentPid","sendLog","cmd","Message","To","Instance","CommandType","INIT","instance","handleInstanceMessageFromParent","replyInstanceError","toString","stack","handleChildMessageFromParent","replyChildError","args","decodeArguments","callbackId","Promise","resolve","reject","sendCallback","err","encodedResult","result","decodeArgumentsFromParent","encodeArguments","messageToReplyTo","reply","sendInstanceReplyToParent","undefined","sendChildReplyToParent","replyTo","From","REPLY","sendInstanceMessageToParent","Child","sendChildMessageToParent","LOG","CALLBACK","obj","props","concat","getOwnPropertyNames","getPrototypeOf","pModuleClass","_config","config","parentPid","oReq","XMLHttpRequest","open","modulePath","onload","response","then","bodyString","fcn","exportName","moduleClass","eval","decodedArgs","apply","allProps","getAllProperties","forEach","prop","indexOf","descriptor","getOwnPropertyDescriptor","inProto","proto","__proto__","descr","enumerable","writable","get","set","readable","push","key","InitPropType","FUNCTION","VALUE","replyToInstanceMessage","catch","disableMultithreading","startOrphanMonitoring","PING","fixedArgs","encodeArgumentsToParent","errorResponse","SET","fixedValue","property","KILL","killInstance","callback","GET_MEM_USAGE","memUsage","memoryUsage","window","performance","memory","replyToChildMessage","setInterval","setTimeout","exit","hasOwnProperty","browserSupportsWebWorkers","ArgumentType","DEFAULT_CHILD_FREEZE_TIME","argumentsCallbackId","map","arg","OBJECT","Buffer","BUFFER","original","STRING","NUMBER","UNDEFINED","NULL","OTHER","getCallback","from","byteLength","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","arr","Arr","_byteLength","curByte","len","revLookup","charCodeAt","fromByteArray","uint8","extraBytes","parts","len2","encodeChunk","lookup","join","Uint8Array","Array","start","end","num","output","base64","ieee754","SlowBuffer","alloc","INSPECT_MAX_BYTES","K_MAX_LENGTH","createBuffer","RangeError","buf","prototype","encodingOrOffset","TypeError","allocUnsafe","string","encoding","isEncoding","actual","write","slice","fromString","ArrayBuffer","isView","fromArrayLike","isInstance","buffer","array","byteOffset","fromArrayBuffer","valueOf","b","isBuffer","checked","copy","numberIsNaN","isArray","fromObject","Symbol","toPrimitive","assertSize","size","mustMatch","arguments","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","swap","bidirectionalIndexOf","val","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","String","read","readUInt16BE","foundIndex","found","j","hexWrite","offset","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64Slice","utf8Slice","Math","min","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","decodeCodePointsArray","kMaxLength","TYPED_ARRAY_SUPPORT","foo","typedArraySupport","species","configurable","poolSize","fill","allocUnsafeSlow","_isBuffer","compare","x","y","list","pos","swap16","swap32","swap64","hexSlice","asciiSlice","latin1Slice","utf16leSlice","toLocaleString","equals","inspect","max","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","ret","out","toHex","bytes","checkOffset","ext","checkInt","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","subarray","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","INVALID_BASE64_RE","Infinity","leadSurrogate","split","base64clean","src","dst","constructor","name","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","d","s","NaN","rt","abs","isNaN","floor","LN2","pid","stub","kill","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","clearTimeout","currentQueue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","noop","nextTick","title","browser","env","argv","version","versions","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","umask"],"mappings":"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","file":"threadedclass-worker.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lib_1 = require(\"../shared/lib\");\nconst worker_1 = require(\"./worker\");\nconst WorkerThreads = lib_1.getWorkerThreads();\n// This file is launched in the worker child process.\n// This means that all code in this file is considered to be sandboxed in the child process.\nfunction send(message) {\n    if (WorkerThreads) {\n        if (WorkerThreads.parentPort) {\n            WorkerThreads.parentPort.postMessage(message);\n        }\n        else {\n            throw Error('WorkerThreads.parentPort not set!');\n        }\n    }\n    else if (process.send) {\n        process.send(message);\n        // @ts-ignore global postMessage\n    }\n    else if (postMessage) {\n        // @ts-ignore\n        postMessage(message);\n    }\n    else\n        throw Error('process.send and postMessage are undefined!');\n}\nclass ThreadedWorker extends worker_1.Worker {\n    sendInstanceMessageToParent(handle, msg, cb) {\n        const message = Object.assign(Object.assign({}, msg), {\n            messageType: 'instance',\n            cmdId: handle.cmdId++,\n            instanceId: handle.id\n        });\n        if (cb)\n            handle.queue[message.cmdId + ''] = cb;\n        send(message);\n    }\n    sendChildMessageToParent(handle, msg, cb) {\n        const message = Object.assign(Object.assign({}, msg), {\n            messageType: 'child',\n            cmdId: handle.cmdId++\n        });\n        if (cb)\n            handle.queue[message.cmdId + ''] = cb;\n        send(message);\n    }\n    killInstance(handle) {\n        delete this.instanceHandles[handle.id];\n    }\n}\nfunction isRunningInAWorkerThread() {\n    if (lib_1.nodeSupportsWorkerThreads()) {\n        const workerThreads = lib_1.getWorkerThreads();\n        if (workerThreads) {\n            if (!workerThreads.isMainThread) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nif (lib_1.isBrowser()) {\n    // Is running in a web-worker\n    const worker = new ThreadedWorker();\n    // @ts-ignore global onmessage\n    onmessage = (m) => {\n        // Received message from parent\n        if (m.type === 'message') {\n            worker.onMessageFromParent(m.data);\n        }\n        else {\n            console.log('child process: onMessage', m);\n        }\n    };\n}\nelse if (isRunningInAWorkerThread()) {\n    // Is running in a worker-thread\n    if (WorkerThreads) {\n        const worker = new ThreadedWorker();\n        console.log = worker.log;\n        console.error = worker.logError;\n        if (WorkerThreads.parentPort) {\n            WorkerThreads.parentPort.on('message', (m) => {\n                // Received message from parent\n                worker.onMessageFromParent(m);\n            });\n        }\n        else {\n            throw Error('WorkerThreads.parentPort not set!');\n        }\n    }\n    else {\n        throw Error('WorkerThreads not available!');\n    }\n}\nelse if (process.send) {\n    // Is running in a child process\n    const worker = new ThreadedWorker();\n    console.log = worker.log;\n    console.error = worker.logError;\n    process.on('message', (m) => {\n        // Received message from parent\n        worker.onMessageFromParent(m);\n    });\n}\nelse {\n    throw Error('process.send and onmessage are undefined!');\n}\n//# sourceMappingURL=threadedclass-worker.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst isRunning = require(\"is-running\");\nconst lib_1 = require(\"../shared/lib\");\nconst sharedApi_1 = require(\"../shared/sharedApi\");\n/** In a child process, there is running one (1) Worker, which handles the communication with the parent process. */\nclass Worker {\n    constructor() {\n        this.childHandler = {\n            cmdId: 0,\n            queue: {}\n        };\n        this.instanceHandles = {};\n        this.callbacks = {};\n        this.remoteFns = {};\n        this.disabledMultithreading = false;\n        this._parentPid = 0;\n        this.log = (...data) => {\n            this.sendLog(data);\n        };\n        this.logError = (...data) => {\n            this.sendLog(['Error', ...data]);\n        };\n    }\n    onMessageFromParent(m) {\n        // A message was received from Parent\n        if (m.messageType === 'instance') {\n            let handle = this.instanceHandles[m.instanceId];\n            if (!handle && m.cmd !== sharedApi_1.Message.To.Instance.CommandType.INIT) {\n                console.log(`Child process: Unknown instanceId: \"${m.instanceId}\"`);\n                return; // fail silently?\n            }\n            if (!handle) {\n                // create temporary handle:\n                handle = {\n                    id: m.instanceId,\n                    cmdId: 0,\n                    queue: {},\n                    instance: {}\n                };\n            }\n            try {\n                this.handleInstanceMessageFromParent(m, handle);\n            }\n            catch (e) {\n                if (m.cmdId) {\n                    this.replyInstanceError(handle, m, `Error: ${e.toString()} ${e.stack} on instance \"${m.instanceId}\"`);\n                }\n                else\n                    this.log('Error: ' + e.toString(), e.stack);\n            }\n        }\n        else if (m.messageType === 'child') {\n            let handle = this.childHandler;\n            try {\n                this.handleChildMessageFromParent(m, handle);\n            }\n            catch (e) {\n                if (m.cmdId) {\n                    this.replyChildError(handle, m, `Error: ${e.toString()} ${e.stack}\"`);\n                }\n                else\n                    this.log('Error: ' + e.toString(), e.stack);\n            }\n        }\n    }\n    decodeArgumentsFromParent(handle, args) {\n        // Note: handle.instance could change if this was called for the constructor parameters, so it needs to be loose\n        return sharedApi_1.decodeArguments(() => handle.instance, args, (a) => {\n            const callbackId = a.value;\n            if (!this.remoteFns[callbackId]) {\n                this.remoteFns[callbackId] = ((...args) => {\n                    return new Promise((resolve, reject) => {\n                        const callbackId = a.value;\n                        this.sendCallback(handle, callbackId, args, (err, encodedResult) => {\n                            if (err) {\n                                reject(err);\n                            }\n                            else {\n                                const result = encodedResult ? this.decodeArgumentsFromParent(handle, [encodedResult]) : [encodedResult];\n                                resolve(result[0]);\n                            }\n                        });\n                    });\n                });\n            }\n            return this.remoteFns[callbackId];\n        });\n    }\n    encodeArgumentsToParent(instance, args) {\n        return sharedApi_1.encodeArguments(instance, this.callbacks, args, this.disabledMultithreading);\n    }\n    replyToInstanceMessage(handle, messageToReplyTo, reply) {\n        this.sendInstanceReplyToParent(handle, messageToReplyTo.cmdId, undefined, reply);\n    }\n    replyToChildMessage(handle, messageToReplyTo, reply) {\n        this.sendChildReplyToParent(handle, messageToReplyTo.cmdId, undefined, reply);\n    }\n    replyInstanceError(handle, messageToReplyTo, error) {\n        this.sendInstanceReplyToParent(handle, messageToReplyTo.cmdId, error);\n    }\n    replyChildError(handle, messageToReplyTo, error) {\n        this.sendChildReplyToParent(handle, messageToReplyTo.cmdId, error);\n    }\n    sendInstanceReplyToParent(handle, replyTo, error, reply) {\n        let msg = {\n            cmd: sharedApi_1.Message.From.Instance.CommandType.REPLY,\n            replyTo: replyTo,\n            error: error ? (error.stack || error).toString() : error,\n            reply: reply\n        };\n        this.sendInstanceMessageToParent(handle, msg);\n    }\n    sendChildReplyToParent(handle, replyTo, error, reply) {\n        let msg = {\n            cmd: sharedApi_1.Message.From.Child.CommandType.REPLY,\n            replyTo: replyTo,\n            error: error ? (error.stack || error).toString() : error,\n            reply: reply\n        };\n        this.sendChildMessageToParent(handle, msg);\n    }\n    sendLog(log) {\n        let msg = {\n            cmd: sharedApi_1.Message.From.Child.CommandType.LOG,\n            log: log\n        };\n        this.sendChildMessageToParent(this.childHandler, msg);\n    }\n    sendCallback(handle, callbackId, args, cb) {\n        let msg = {\n            cmd: sharedApi_1.Message.From.Instance.CommandType.CALLBACK,\n            callbackId: callbackId,\n            args: args\n        };\n        this.sendInstanceMessageToParent(handle, msg, cb);\n    }\n    getAllProperties(obj) {\n        let props = [];\n        do {\n            props = props.concat(Object.getOwnPropertyNames(obj));\n            obj = Object.getPrototypeOf(obj);\n        } while (obj);\n        return props;\n    }\n    handleInstanceMessageFromParent(m, handle) {\n        const instance = handle.instance;\n        if (m.cmd === sharedApi_1.Message.To.Instance.CommandType.INIT) {\n            const msg = m;\n            this._config = m.config;\n            this._parentPid = m.parentPid;\n            let pModuleClass;\n            // Load in the class:\n            if (lib_1.isBrowser()) {\n                pModuleClass = new Promise((resolve, reject) => {\n                    // @ts-ignore\n                    let oReq = new XMLHttpRequest();\n                    oReq.open('GET', msg.modulePath, true);\n                    // oReq.responseType = 'blob'\n                    oReq.onload = () => {\n                        if (oReq.response) {\n                            resolve(oReq.response);\n                        }\n                        else {\n                            reject(Error(`Bad reply from ${msg.modulePath} in instance ${handle.id}`));\n                        }\n                    };\n                    oReq.send();\n                })\n                    .then((bodyString) => {\n                    // This is a terrible hack, I'm ashamed of myself.\n                    // Better solutions are very much appreciated.\n                    // tslint:disable-next-line:no-var-keyword\n                    var f = null;\n                    let fcn = `\n\t\t\t\t\t\tf = function() {\n\t\t\t\t\t\t\t${bodyString}\n\t\t\t\t\t\t\t;\n\t\t\t\t\t\t\treturn ${msg.exportName}\n\t\t\t\t\t\t}\n\t\t\t\t\t`;\n                    // tslint:disable-next-line:no-eval\n                    let moduleClass = eval(fcn)();\n                    f = f;\n                    if (!moduleClass) {\n                        throw Error(`${msg.exportName} not found in ${msg.modulePath}`);\n                    }\n                    return moduleClass;\n                });\n            }\n            else {\n                pModuleClass = Promise.resolve(require(msg.modulePath))\n                    .then((module) => {\n                    return module[msg.exportName];\n                });\n            }\n            pModuleClass\n                .then((moduleClass) => {\n                if (!moduleClass) {\n                    return Promise.reject('Failed to find class');\n                }\n                const handle = {\n                    id: msg.instanceId,\n                    cmdId: 0,\n                    queue: {},\n                    instance: null // Note: This is dangerous, but gets set right after.\n                };\n                const decodedArgs = this.decodeArgumentsFromParent(handle, msg.args);\n                handle.instance = ((...args) => {\n                    return new moduleClass(...args);\n                }).apply(null, decodedArgs);\n                this.instanceHandles[handle.id] = handle;\n                const instance = handle.instance;\n                const allProps = this.getAllProperties(instance);\n                const props = [];\n                allProps.forEach((prop) => {\n                    if ([\n                        'constructor',\n                        '__defineGetter__',\n                        '__defineSetter__',\n                        'hasOwnProperty',\n                        '__lookupGetter__',\n                        '__lookupSetter__',\n                        'isPrototypeOf',\n                        'propertyIsEnumerable',\n                        'toString',\n                        'valueOf',\n                        '__proto__',\n                        'toLocaleString'\n                    ].indexOf(prop) !== -1)\n                        return;\n                    let descriptor = Object.getOwnPropertyDescriptor(instance, prop);\n                    let inProto = 0;\n                    let proto = instance.__proto__;\n                    while (!descriptor) {\n                        if (!proto)\n                            break;\n                        descriptor = Object.getOwnPropertyDescriptor(proto, prop);\n                        inProto++;\n                        proto = proto.__proto__;\n                    }\n                    if (!descriptor)\n                        descriptor = {};\n                    let descr = {\n                        // configurable:\t!!descriptor.configurable,\n                        inProto: inProto,\n                        enumerable: !!descriptor.enumerable,\n                        writable: !!descriptor.writable,\n                        get: !!descriptor.get,\n                        set: !!descriptor.set,\n                        readable: !!(!descriptor.get && !descriptor.get) // if no getter or setter, ie an ordinary property\n                    };\n                    if (typeof instance[prop] === 'function') {\n                        props.push({\n                            key: prop,\n                            type: sharedApi_1.InitPropType.FUNCTION,\n                            descriptor: descr\n                        });\n                    }\n                    else {\n                        props.push({\n                            key: prop,\n                            type: sharedApi_1.InitPropType.VALUE,\n                            descriptor: descr\n                        });\n                    }\n                });\n                this.replyToInstanceMessage(handle, msg, props);\n                return;\n            })\n                .catch((e) => {\n                console.log('INIT error', e);\n            });\n            if (!m.config.disableMultithreading && !lib_1.nodeSupportsWorkerThreads()) {\n                this.startOrphanMonitoring();\n            }\n        }\n        else if (m.cmd === sharedApi_1.Message.To.Instance.CommandType.PING) {\n            this.replyToInstanceMessage(handle, m, null);\n        }\n        else if (m.cmd === sharedApi_1.Message.To.Instance.CommandType.REPLY) {\n            const msg = m;\n            let cb = handle.queue[msg.replyTo + ''];\n            if (!cb)\n                throw Error(`cmdId \"${msg.cmdId}\" not found in instance ${m.instanceId}!`);\n            if (msg.error) {\n                cb(msg.error);\n            }\n            else {\n                cb(null, msg.reply);\n            }\n            delete handle.queue[msg.replyTo + ''];\n        }\n        else if (m.cmd === sharedApi_1.Message.To.Instance.CommandType.FUNCTION) {\n            // A function has been called by parent\n            let msg = m;\n            const fixedArgs = this.decodeArgumentsFromParent(handle, msg.args);\n            let p = (typeof instance[msg.fcn] === 'function' ?\n                instance[msg.fcn](...fixedArgs) :\n                instance[msg.fcn]); // in case instance[msg.fcn] does not exist, it will simply resolve to undefined on the consumer side\n            Promise.resolve(p)\n                .then((result) => {\n                const encodedResult = this.encodeArgumentsToParent(instance, [result]);\n                this.replyToInstanceMessage(handle, msg, encodedResult[0]);\n            })\n                .catch((err) => {\n                let errorResponse = (err.stack || err.toString()) + `\\n executing function \"${msg.fcn}\" of instance \"${m.instanceId}\"`;\n                this.replyInstanceError(handle, msg, errorResponse);\n            });\n        }\n        else if (m.cmd === sharedApi_1.Message.To.Instance.CommandType.SET) {\n            let msg = m;\n            const fixedValue = this.decodeArgumentsFromParent(handle, [msg.value])[0];\n            instance[msg.property] = fixedValue;\n            this.replyToInstanceMessage(handle, msg, fixedValue);\n        }\n        else if (m.cmd === sharedApi_1.Message.To.Instance.CommandType.KILL) {\n            let msg = m;\n            // kill off instance\n            this.killInstance(handle);\n            this.replyToInstanceMessage(handle, msg, null);\n        }\n        else if (m.cmd === sharedApi_1.Message.To.Instance.CommandType.CALLBACK) {\n            let msg = m;\n            let callback = this.callbacks[msg.callbackId];\n            if (callback) {\n                try {\n                    Promise.resolve(callback(...msg.args))\n                        .then((result) => {\n                        const encodedResult = this.encodeArgumentsToParent(instance, [result]);\n                        this.replyToInstanceMessage(handle, msg, encodedResult[0]);\n                    })\n                        .catch((err) => {\n                        let errorResponse = (err.stack || err.toString()) + `\\n executing callback of instance \"${m.instanceId}\"`;\n                        this.replyInstanceError(handle, msg, errorResponse);\n                    });\n                }\n                catch (err) {\n                    let errorResponse = (err.stack || err.toString()) + `\\n executing (outer) callback of instance \"${m.instanceId}\"`;\n                    this.replyInstanceError(handle, msg, errorResponse);\n                }\n            }\n            else {\n                this.replyInstanceError(handle, msg, `Callback \"${msg.callbackId}\" not found on instance \"${m.instanceId}\"`);\n            }\n        }\n    }\n    handleChildMessageFromParent(m, handle) {\n        if (m.cmd === sharedApi_1.Message.To.Child.CommandType.GET_MEM_USAGE) {\n            let memUsage = (process ?\n                process.memoryUsage() :\n                // @ts-ignore web-worker global window\n                window ?\n                    // @ts-ignore web-worker global window\n                    window.performance.memory :\n                    { error: 'N/A' });\n            const encodedResult = this.encodeArgumentsToParent({}, [memUsage])[0];\n            this.replyToChildMessage(handle, m, encodedResult);\n        }\n    }\n    startOrphanMonitoring() {\n        if (this._config) {\n            const pingTime = 5000;\n            setInterval(() => {\n                if (this._parentPid && !isRunning(this._parentPid)) {\n                    console.log(`Parent pid ${this._parentPid} missing, exiting process!`);\n                    setTimeout(() => {\n                        process.exit(27);\n                    }, 100);\n                }\n            }, pingTime);\n        }\n    }\n}\nexports.Worker = Worker;\n//# sourceMappingURL=worker.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Returns true if running in th browser (if not, then we're in NodeJS)\n */\nfunction isBrowser() {\n    return !(process && process.hasOwnProperty('stdin'));\n}\nexports.isBrowser = isBrowser;\nfunction browserSupportsWebWorkers() {\n    // @ts-ignore\n    return !!(isBrowser() && window.Worker);\n}\nexports.browserSupportsWebWorkers = browserSupportsWebWorkers;\nfunction nodeSupportsWorkerThreads() {\n    const workerThreads = getWorkerThreads();\n    return !!workerThreads;\n}\nexports.nodeSupportsWorkerThreads = nodeSupportsWorkerThreads;\nfunction getWorkerThreads() {\n    try {\n        const workerThreads = require('worker_threads');\n        return workerThreads;\n    }\n    catch (e) {\n        return null;\n    }\n}\nexports.getWorkerThreads = getWorkerThreads;\n//# sourceMappingURL=lib.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// This file contains definitions for the API between the child and parent process.\nexports.DEFAULT_CHILD_FREEZE_TIME = 1000; // how long to wait before considering a child to be unresponsive\nvar InitPropType;\n(function (InitPropType) {\n    InitPropType[\"FUNCTION\"] = \"function\";\n    InitPropType[\"VALUE\"] = \"value\";\n})(InitPropType = exports.InitPropType || (exports.InitPropType = {}));\n// Messages to/from child instances ------------------------------------------------\n/** Definitions of all messages between the child and parent */\nvar Message;\n(function (Message) {\n    /** Defines messages from the child ot the parent process */\n    let To;\n    (function (To) {\n        let Instance;\n        (function (Instance) {\n            let CommandType;\n            (function (CommandType) {\n                CommandType[\"INIT\"] = \"init\";\n                CommandType[\"PING\"] = \"ping\";\n                CommandType[\"FUNCTION\"] = \"fcn\";\n                CommandType[\"REPLY\"] = \"reply\";\n                CommandType[\"SET\"] = \"set\";\n                CommandType[\"KILL\"] = \"kill\";\n                CommandType[\"CALLBACK\"] = \"callback\";\n            })(CommandType = Instance.CommandType || (Instance.CommandType = {}));\n        })(Instance = To.Instance || (To.Instance = {}));\n        let Child;\n        (function (Child) {\n            let CommandType;\n            (function (CommandType) {\n                CommandType[\"GET_MEM_USAGE\"] = \"get_mem_usage\";\n                CommandType[\"REPLY\"] = \"reply\";\n            })(CommandType = Child.CommandType || (Child.CommandType = {}));\n        })(Child = To.Child || (To.Child = {}));\n    })(To = Message.To || (Message.To = {}));\n    /** Defines messages from the parent process to the child */\n    let From;\n    (function (From) {\n        let Instance;\n        (function (Instance) {\n            let CommandType;\n            (function (CommandType) {\n                CommandType[\"CALLBACK\"] = \"callback\";\n                CommandType[\"REPLY\"] = \"reply\";\n            })(CommandType = Instance.CommandType || (Instance.CommandType = {}));\n        })(Instance = From.Instance || (From.Instance = {}));\n        let Child;\n        (function (Child) {\n            let CommandType;\n            (function (CommandType) {\n                CommandType[\"LOG\"] = \"log\";\n                CommandType[\"REPLY\"] = \"reply\";\n                CommandType[\"CALLBACK\"] = \"callback\";\n            })(CommandType = Child.CommandType || (Child.CommandType = {}));\n        })(Child = From.Child || (From.Child = {}));\n    })(From = Message.From || (Message.From = {}));\n})(Message = exports.Message || (exports.Message = {}));\nvar ArgumentType;\n(function (ArgumentType) {\n    ArgumentType[\"STRING\"] = \"string\";\n    ArgumentType[\"NUMBER\"] = \"number\";\n    ArgumentType[\"UNDEFINED\"] = \"undefined\";\n    ArgumentType[\"NULL\"] = \"null\";\n    ArgumentType[\"OBJECT\"] = \"object\";\n    ArgumentType[\"FUNCTION\"] = \"function\";\n    ArgumentType[\"BUFFER\"] = \"buffer\";\n    ArgumentType[\"OTHER\"] = \"other\";\n})(ArgumentType || (ArgumentType = {}));\nlet argumentsCallbackId = 0;\nfunction encodeArguments(instance, callbacks, args, disabledMultithreading) {\n    try {\n        return args.map((arg, i) => {\n            try {\n                if (typeof arg === 'object' && arg === instance) {\n                    return { type: ArgumentType.OBJECT, value: 'self' };\n                }\n                if (disabledMultithreading) {\n                    // In single-threaded mode, we can send the arguments directly, without any conversion:\n                    if (arg instanceof Buffer)\n                        return { type: ArgumentType.BUFFER, original: arg, value: null };\n                    if (typeof arg === 'object')\n                        return { type: ArgumentType.OBJECT, original: arg, value: null };\n                }\n                if (arg instanceof Buffer)\n                    return { type: ArgumentType.BUFFER, value: arg.toString('hex') };\n                if (typeof arg === 'string')\n                    return { type: ArgumentType.STRING, value: arg };\n                if (typeof arg === 'number')\n                    return { type: ArgumentType.NUMBER, value: arg };\n                if (typeof arg === 'function') {\n                    // have we seen this one before?\n                    for (const id in callbacks) {\n                        if (callbacks[id] === arg) {\n                            return { type: ArgumentType.FUNCTION, value: id + '' };\n                        }\n                    }\n                    // new function, so add it to our list\n                    const callbackId = argumentsCallbackId++;\n                    callbacks[callbackId + ''] = arg;\n                    return { type: ArgumentType.FUNCTION, value: callbackId + '' };\n                }\n                if (arg === undefined)\n                    return { type: ArgumentType.UNDEFINED, value: arg };\n                if (arg === null)\n                    return { type: ArgumentType.NULL, value: arg };\n                if (typeof arg === 'object')\n                    return { type: ArgumentType.OBJECT, value: arg };\n                return { type: ArgumentType.OTHER, value: arg };\n            }\n            catch (e) {\n                if (e.stack)\n                    e.stack += '\\nIn encodeArguments, argument ' + i;\n                throw e;\n            }\n        });\n    }\n    catch (e) {\n        if (e.stack)\n            e.stack += '\\nThreadedClass, unsupported attribute';\n        throw e;\n    }\n}\nexports.encodeArguments = encodeArguments;\nfunction decodeArguments(instance, args, getCallback) {\n    // Go through arguments and de-serialize them\n    return args.map((a) => {\n        if (a.original !== undefined)\n            return a.original;\n        if (a.type === ArgumentType.STRING)\n            return a.value;\n        if (a.type === ArgumentType.NUMBER)\n            return a.value;\n        if (a.type === ArgumentType.BUFFER)\n            return Buffer.from(a.value, 'hex');\n        if (a.type === ArgumentType.UNDEFINED)\n            return a.value;\n        if (a.type === ArgumentType.NULL)\n            return a.value;\n        if (a.type === ArgumentType.FUNCTION) {\n            return getCallback(a);\n        }\n        if (a.type === ArgumentType.OBJECT) {\n            if (a.value === 'self') {\n                return instance();\n            }\n            else {\n                return a.value;\n            }\n        }\n        return a.value;\n    });\n}\nexports.decodeArguments = decodeArguments;\n//# sourceMappingURL=sharedApi.js.map","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\n// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\nif (typeof Symbol !== 'undefined' && Symbol.species != null &&\n    Buffer[Symbol.species] === Buffer) {\n  Object.defineProperty(Buffer, Symbol.species, {\n    value: null,\n    configurable: true,\n    enumerable: false,\n    writable: false\n  })\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayLike(value)\n  }\n\n  if (value == null) {\n    throw TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nBuffer.prototype.__proto__ = Uint8Array.prototype\nBuffer.__proto__ = Uint8Array\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      buf = Buffer.from(buf)\n    }\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n        : (firstByte > 0xBF) ? 2\n          : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  newBuf.__proto__ = Buffer.prototype\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (var i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","module.exports = function (pid) {\n  if (module.exports.stub !== module.exports) {\n      return module.exports.stub.apply(this, arguments);\n  }\n  try {\n    return process.kill(pid,0)\n  }\n  catch (e) {\n    return e.code === 'EPERM'\n  }\n}\nmodule.exports.stub = module.exports;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n"]}